/* Still need to work on figuring out why
   'else' statement used to iterate through
   existing nodes is not working
*/
   

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include <stddef.h>
#include <string.h>

const int ALPHABET_SIZE = 26;

typedef struct Node 
{
	struct Node* parentNode;
	struct Node* trieNodeArr[ALPHABET_SIZE];
	bool isWord;
	
} trieNode;

void trieWordInsert (char *inputWordArray, trieNode*);
bool trieWordSearch(char *inputWordArray, trieNode *currentTrieNode);
int asciiToIndex(char);

int main(void)
{

	trieNode* rootTrieNode = (trieNode*)malloc(1 * sizeof(trieNode));
	
	rootTrieNode->parentNode = NULL;
	rootTrieNode->isWord = false;
	for (int x = 0; x < ALPHABET_SIZE; x++)
	{
		rootTrieNode->trieNodeArr[x] = NULL;
	}

	char wordTest1[9] = {'j','o','n','a','t','h','a','n'};
	char wordTest2[4] = {'j','o','n'};
	trieWordInsert(wordTest1, rootTrieNode);
	trieWordInsert(wordTest2, rootTrieNode);
	bool wordStatus1 = trieWordSearch(wordTest1, rootTrieNode);
	bool wordStatus2 = trieWordSearch(wordTest2, rootTrieNode);

	printf("Word Status1:%i\n", wordStatus1);
	printf("Word Status2:%i\n", wordStatus2);
	

	free(rootTrieNode);

	return 0;

}


void trieWordInsert(char *inputWordArray, trieNode *currentTrieNode)
{

	trieNode *newTrieNode = NULL;
	
	for (int x = 0; x < strlen(inputWordArray); x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (currentTrieNode->trieNodeArr[arrayPosition] == NULL)
		{
			newTrieNode = (trieNode*)malloc(1 * sizeof(trieNode));
			
			//Initialize values for newTrieNode
			newTrieNode->parentNode = currentTrieNode;
			newTrieNode->isWord = false;
			for (int y = 0; y < ALPHABET_SIZE - 1; y++)
			{
				newTrieNode->trieNodeArr[y] = NULL;
			}
			
			//Set the pointer value in currentNode at yth index to the
			//location of newTrieNode
			currentTrieNode->trieNodeArr[arrayPosition] = newTrieNode;
			
			if (strlen(inputWordArray) - x == 1)
			{
			currentTrieNode->isWord = true;
			break;
			}
			
			currentTrieNode = newTrieNode;
		}
		
		else
		{

			currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			
			if (strlen(inputWordArray) - x == 1)
			{
			currentTrieNode->isWord = true;
			}
		}
	}
}


bool trieWordSearch(char *inputWordArray, trieNode *currentTrieNode)
{
	for (int x = 0; x < strlen(inputWordArray); x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (strlen(inputWordArray) - x == 1 &&
		    currentTrieNode->isWord == true)
			{
				return true;
			}
		else if (currentTrieNode->trieNodeArr[arrayPosition] != NULL)
			{
				currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			}
		else
			{
				return false;
			}
	}
	return false;
}


int asciiToIndex(char letter)
{
	if (isupper(letter))
	{
		letter = tolower(letter);
	}
	
	return (int)letter - 97;
}
