#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>
#include <stddef.h>
#include <string.h>

const int ALPHABET_SIZE = 26;

typedef struct Node {
	struct Node* trieNodeArr[ALPHABET_SIZE];
	bool isWord;
	
} trieNode;

void trieWordInsert (char *inputWordArray, trieNode*);
bool trieWordSearch(char *inputWordArray, trieNode *currentTrieNode);
void trieWordInsert(char *inputWordArray, trieNode *currentTrieNode);
int asciiToIndex(char);

int main(void)
{

trieNode* rootTrieNode = (trieNode*)malloc(1);
trieNode* currentTrieNode = rootTrieNode;


char wordTest[3] = {'j','o'};
trieWordInsert(wordTest, currentTrieNode);
bool wordStatus = trieWordSearch(wordTest, currentTrieNode);

printf("%i\n", wordStatus);
printf("%lu\n", strlen(wordTest));

free(currentTrieNode);

return 0;

}

bool trieWordSearch(char *inputWordArray, trieNode *currentTrieNode)
{
	for (int x = 0; x < strlen(inputWordArray) - 1; x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (currentTrieNode->trieNodeArr[arrayPosition] == NULL &&
		    currentTrieNode->isWord == true)
			{
				return true;
			}
		else if (currentTrieNode->trieNodeArr[arrayPosition] != NULL)
			{
				currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			}
		else
			{
				return false;
			}
	}
	return false;
}

void trieWordInsert(char *inputWordArray, trieNode *currentTrieNode)
{

	trieNode *newTrieNode = NULL;
	
	for (int x = 0; x < strlen(inputWordArray) - 1; x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (currentTrieNode->trieNodeArr[arrayPosition] == NULL)
		{
			newTrieNode = (trieNode*)malloc(1);
			currentTrieNode->trieNodeArr[arrayPosition] = newTrieNode;
			
			if (strlen(inputWordArray) - x == 1)
			{
				newTrieNode->isWord = true;
			}
			currentTrieNode = newTrieNode;
			newTrieNode = NULL;
		}
		else
		{
			currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			
			if (strlen(inputWordArray) - x == 1)
			{
				currentTrieNode->isWord = true;
			}
		}
	}
	if (currentTrieNode == newTrieNode)
	{
		free(currentTrieNode);
	}
	else
	{
		free(newTrieNode);
	}
	
}

int asciiToIndex(char letter)
{
	if (isupper(letter))
	{
		letter = tolower(letter);
	}
	
	return (int)letter - 97;
}
