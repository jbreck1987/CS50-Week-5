#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <ctype.h>

typedef struct trieNode
{
	trieNode* trieNodeArr[26] = {NULL};
	bool isWord = false;
	
} trieNode;

void trieWordInsert (char [], trieNode*);
int asciiToIndex(char);

int main(void)
{

trieNode* rootTrieNode = (trieNode*)malloc(1);
trieNode* currentTrieNode = rootTrieNode;

}

bool trieWordSearch(char inputWordArray[], trieNode* currentTrieNode)
{
	for (int x = 0; x < strlen(inputWordArray) - 1; x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (currentTrieNode->trieNodeArr[arrayPosition] == NULL &&
		    currentTrieNode->isWord == true)
			{
				return True;
			}
		else if (currentTrieNode->trieNodeArr[arrayPosition] != NULL)
			{
				currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			}
		else
			{
				return False;
			}
	}
}

void trieWordInsert(char inputWordArray[], trieNode* currentTrieNode)
{

	trieNode* newTrieNode = NULL;
	
	for (int x = 0; x < strlen(inputWordArray)-1; x++)
	{
		int arrayPosition = asciiToIndex(inputWordArray[x]);
		
		if (currentTrieNode->trieNodeArr[arrayPosition] == NULL)
		{
			newTrieNode = (trieNode*)malloc(1);
			currentTrieNode->trieNodeArr[arrayPosition] = newTrieNode;
			
			if (strlen(inputWordArray) - x == 2)
			{
				newTrieNode->isWord = True;
			}
			currentTrieNode = newTrieNode;
			newTrieNode = NULL;
		}
		else
		{
			currentTrieNode = currentTrieNode->trieNodeArr[arrayPosition];
			
			if (strlen(inputWordArray) - x == 1)
			{
				currentTrieNode->isWord = True;
			}
		}
	}
}


int asciiToIndex(char letter)
{
	if (isupper(letter))
	{
		letter = tolower(letter);
		letter = atoi(letter);
	}
	
	return letter - 97;
}
